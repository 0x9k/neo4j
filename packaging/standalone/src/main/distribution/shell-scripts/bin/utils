#!/bin/bash
# Copyright (c) 2002-2015 "Neo Technology,"
# Network Engine for Objects in Lund AB [http://neotechnology.com]
#
# This file is part of Neo4j.
#
# Neo4j is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

function show_java_requirements() {
  echo "* Please use Oracle(R) Java(TM) 8 or OpenJDK(TM) to run Neo4j Server."
}

function show_installation_instructions() {
  echo "* Please see http://docs.neo4j.org/ for Neo4j Server installation instructions."
}

# getconfig <filename>
#   - plain key-value pairs become environment variables
#   - keys have '.' chars changed to '_'
#   - keys of the form KEY.# (where # is a number) are concatenated
#     into a single environment variable named KEY
function getconfig {
  if [ -e "$1" ]; then
    while read line ; do
      if [[ ${line} =~ ^([^#\s][^=]+)=(.+)$ ]]; then
        key=`echo ${BASH_REMATCH[1]} | sed 's/\./_/g'`
        value="${BASH_REMATCH[2]}"
        if [[ ${key} =~ ^(.*)_([0-9]+)$ ]]; then
          key="${BASH_REMATCH[1]}"
        fi
        if [[ ${!key} ]]; then
          export ${key}="${!key} ${value}"
        else
          export ${key}="$value"
        fi
      fi
    done < "$1"
  fi
}

function getconfigquoted {
  if [ -e "$1" ]; then
    while read line ; do
      if [[ ${line} =~ "^([^#\s][^=]+)=(.+)$" ]]; then
        key=`echo ${BASH_REMATCH[1]} | sed 's/\./_/g'`
        value="${BASH_REMATCH[2]}"
        if [[ ${key} =~ "^(.*)(_[0-9]+)?$" ]]; then
          key=${BASH_REMATCH[1]}
        fi
        if [[ ${!key} ]]; then
          export ${key}="${!key} ${value}"
        else
          export ${key}="$value"
        fi
      fi
    done < "$1"
  fi
}

# Detect java and set JAVACMD on successful find.
findjava() {
  # OS specific support.  $var _must_ be set to either true or false.
  cygwin=false;
  darwin=false;
  case "`uname`" in
    CYGWIN*) cygwin=true ;;
    Darwin*) darwin=true
           if [ -z "$JAVA_VERSION" ] ; then
             JAVA_VERSION="CurrentJDK"
           else
             echo "Using Java version: $JAVA_VERSION"
           fi
           if [ -z "$JAVA_HOME" ] ; then
             JAVA_HOME=`/usr/libexec/java_home -v 1.8`
           fi
           ;;
  esac

  if [ -z "$JAVA_HOME" ] ; then
    if [ -r /etc/gentoo-release ] ; then
      JAVA_HOME=`java-config --jre-home`
    fi
  fi

  # For Cygwin, ensure paths are in UNIX format before anything is touched
  if $cygwin ; then
    [ -n "$JAVA_HOME" ] && JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
    [ -n "$CLASSPATH" ] && CLASSPATH=`cygpath --path --unix "$CLASSPATH"`
  fi

  # If a specific java binary isn't specified search for the standard 'java' binary
  if [ -z "$JAVACMD" ] ; then
    if [ -n "$JAVA_HOME"  ] ; then
      if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD="$JAVA_HOME/jre/sh/java"
      else
        JAVACMD="$JAVA_HOME/bin/java"
      fi
    else
      if [ "`uname`" != "Darwin" ] ; then
        # Don't use default java on Darwin because it displays a misleading dialog box
        JAVACMD=`which java`
      fi
    fi
  fi
}

checkstatus() {
  if [ -e "$PID_FILE" ] ; then
    NEO4J_PID=$( cat "$PID_FILE" )
    kill -0 $NEO4J_PID 2>/dev/null || NEO4J_PID=
  fi
}

reportstatus() {
  checkstatus
  detectos
  exitonnojava

  if [ -z $NEO4J_PID ] ; then
    echo "$FRIENDLY_NAME is not running"
  	exit 3
  else
    echo "$FRIENDLY_NAME is running at pid $NEO4J_PID"
  fi
}

# Use findjava to set JAVACMD. If that fails ($JAVACMD is not set) then exit with failure
exitonnojava() {
  findjava

  if [ ! -x "$JAVACMD" ] ; then
    echo "ERROR: Unable to find java. (Cannot execute $JAVACMD)"
    show_java_requirements
    show_installation_instructions
    exit 1
  fi
}

# Resolve the os
detectos() {
  DIST_OS=`uname -s | tr 'A-Z' 'a-z' | tr -d ' '`
  case "$DIST_OS" in
    'sunos')
      DIST_OS="solaris"
      ;;
    'hp-ux' | 'hp-ux64')
      # HP-UX needs the XPG4 version of ps (for -o args)
      DIST_OS="hpux"
      UNIX95=""
      export UNIX95
      ;;
    'darwin')
      DIST_OS="macosx"
      ;;
    'unix_sv')
      DIST_OS="unixware"
      ;;
    'os/390')
      DIST_OS="zos"
      ;;
    'cygwin')
      DIST_OS="cygwin"
      ;;
  esac
}

stopit() {
  detectos
  checkstatus

  if [ -z $NEO4J_PID ] ; then
    echo "ERROR: $FRIENDLY_NAME not running"
    [ -e "$PID_FILE" ] && rm "$PID_FILE"
  else
    printf "Stopping $FRIENDLY_NAME [$NEO4J_PID]..."
    x=0
    while [ "$NEO4J_PID" != "" ]  ; do
      kill $NEO4J_PID 2>/dev/null
      if [ $x -le $TIMEOUT ]; then
        printf "."
      fi
      sleep 1
      checkstatus

      if [ $x -eq $TIMEOUT ] ;then
	    echo ""
	    echo "$FRIENDLY_NAME [$NEO4J_PID] is taking more than ${TIMEOUT}s to stop"
	    echo "There might be some troubles with the shutdown of $FRIENDLY_NAME, please read log files for details"
	    echo "This script will keep waiting for the server to shutdown, you could manually kill the process $NEO4J_PID"
	    echo ""
      fi

      x=$[$x+1]
    done
    echo " done"
    [ -e "$PID_FILE" ] && rm  "$PID_FILE"
  fi
}

# Runs before the server command, making sure that whatever should be in place is
# in place.
checkandrepairenv() {
    # Create log directory if missing, change owner if created.
    if [ ! -d "$NEO4J_LOG" ]; then
      echo "${NEO4J_LOG} was missing, recreating..."
      mkdir "$NEO4J_LOG"
    fi
}

# Checks system limits, warns if not proper
checklimits() {
    if [[ $DIST_OS != "macosx" ]] ; then
      OPEN_FILES=`ulimit -n`

      if [ $OPEN_FILES -lt 40000 ]; then
        echo "WARNING: Max $OPEN_FILES open files allowed, minimum of 40 000 recommended. See the Neo4j manual."
      fi
    fi
}

warn_about_java_runtime() {
  echo "WARNING! You are using an unsupported Java runtime. "
  show_java_requirements
  show_installation_instructions
}

complain_about_java_version() {
  echo "ERROR! Neo4j cannot be started using java version $JAVAVERSION. "
  show_java_requirements
  show_installation_instructions
}

# check if running Oracle JDK 8 or OpenJDK 8, warn if not
checkjvmcompatibility() {
  # Shut down if java version < 1.8
  JAVAVERSION=$("$JAVACMD" -version 2>&1 | awk -F '"' '/version/ {print $2}')
  if [[ "$JAVAVERSION" < "1.8" ]]; then
    complain_about_java_version
    exit 1
  fi

  $JAVACMD -version 2>&1 | egrep -q "(Java HotSpot\\(TM\\)|OpenJDK) (64-Bit Server|Server|Client) VM"
  if [ $? -eq 1 ]
  then
    warn_about_java_runtime
  fi
}

checkclasspath() {
  echo $CLASSPATH | egrep -q 'neo4j-kernel-[0-9.]{2,8}-SNAPSHOT' && \
  echo -e "\nWARNING! Latest Development Build. Not intended for general-purpose use. May be unstable."
}
