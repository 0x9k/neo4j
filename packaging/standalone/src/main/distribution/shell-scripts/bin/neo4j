#!/usr/bin/env bash
# Copyright (c) 2002-2015 "Neo Technology,"
# Network Engine for Objects in Lund AB [http://neotechnology.com]
#
# This file is part of Neo4j.
#
# Neo4j is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

set -euo pipefail
[[ "${TRACE:-}" ]] && set -x

FRIENDLY_NAME="Neo4j Server"
SHUTDOWN_TIMEOUT=120
CONFIG_FILES=("neo4j-wrapper.conf" "neo4j-server.properties")
MAIN_CLASS="#{neo4j.mainClass}"
MIN_ALLOWED_OPEN_FILES=40000
CONSOLE_LOG_FILE="console.log"

serverport() {
  echo "${org_neo4j_server_webserver_port:-7474}"
}

printstartmessage() {
  NEO4J_SERVER_ADDRESS="${org_neo4j_server_webserver_address:-localhost}"

  echo "Started at http://${NEO4J_SERVER_ADDRESS}:$(serverport) (pid ${NEO4J_PID})."

  if [ "${org_neo4j_server_database_mode:-}" = "HA" ] ; then
    echo "This HA instance will be operational once it has joined the cluster."
  else
    echo "There may be a short delay until the server is ready."
  fi
}

printextrainfo() {
  echo "NEO4J_SERVER_PORT: $(serverport)"
}

function findBaseDirAndCdThere {
# This seems to not be safe to run at any time. If that
# is the case, it should be fixed to be so, if possible.
  SCRIPT=$0

  cd "$(dirname "${SCRIPT}")"
  SCRIPT="$(basename "${SCRIPT}")"

  while [ -L "${SCRIPT}" ]
  do
    SCRIPT="$(readlink "${SCRIPT}")"
    cd "$(dirname "${SCRIPT}")"
    SCRIPT="$(basename "${SCRIPT}")"
  done

  NEO4J_HOME="$(cd "$(dirname "${SCRIPT}")/.." && dirs -l +0)"
  cd "${NEO4J_HOME}"
}

function parseConfig {
  for file in "${CONFIG_FILES[@]}"; do
    getconfig "${NEO4J_CONFIG}/${file}"
  done
}

findBaseDirAndCdThere
source bin/utils

[[ "${NEO4J_CONFIG:-}" ]] || NEO4J_CONFIG="${NEO4J_HOME}/conf"
[[ "${NEO4J_LOG:-}" ]] || NEO4J_LOG="${NEO4J_HOME}/data/log"
[[ "${NEO4J_PIDFILE:-}" ]] || NEO4J_PIDFILE="${NEO4J_HOME}/data/neo4j-service.pid"

parseConfig

CONSOLE_LOG="${NEO4J_LOG}/${CONSOLE_LOG_FILE}"

JAVA_OPTS="-server"
[[ "${wrapper_java_additional:-}" ]] && JAVA_OPTS="${JAVA_OPTS} ${wrapper_java_additional}"
[[ "${wrapper_java_initmemory:-}" ]] && JAVA_OPTS="${JAVA_OPTS} -Xms${wrapper_java_initmemory}m"
[[ "${wrapper_java_maxmemory:-}" ]] && JAVA_OPTS="${JAVA_OPTS} -Xmx${wrapper_java_maxmemory}m"

buildclasspath() {
  CLASSPATH="${NEO4J_HOME}/lib/*:${NEO4J_HOME}/system/lib/*:${NEO4J_HOME}/plugins/*"
}

startit() {
  checkstatus
  if [[ "${NEO4J_PID:-}" ]] ; then
    echo "${FRIENDLY_NAME} is already running (pid ${NEO4J_PID})."
    exit 0
  fi

  exitonnojava
  checkjvmcompatibility

  echo "Starting ${FRIENDLY_NAME}."

  checklimits
  buildclasspath
  checkandrepairenv

  nohup "${JAVACMD}" -cp "${CLASSPATH}" ${JAVA_OPTS} -Dneo4j.home="${NEO4J_HOME}" -Dfile.encoding=UTF-8 "${MAIN_CLASS}" \
    >>"${CONSOLE_LOG}" 2>&1 &
  echo "$!" >"${NEO4J_PIDFILE}"

  sleep "${NEO4J_START_WAIT:-5}"
  checkstatus
  if [[ ! "${NEO4J_PID:-}" ]] ; then
    echo "Unable to start. See ${CONSOLE_LOG} for details."
    rm "${NEO4J_PIDFILE}"
    exit 1
  fi

  printstartmessage
  echo "See ${CONSOLE_LOG} for current status."
}

console() {
  checkstatus
  if [[ "${NEO4J_PID:-}" ]] ; then
    echo "${FRIENDLY_NAME} is already running (pid ${NEO4J_PID})."
    exit 1
  fi

  exitonnojava
  checkjvmcompatibility

  echo "Starting ${FRIENDLY_NAME}."

  checklimits
  buildclasspath
  checkandrepairenv

  exec "${JAVACMD}" -cp "${CLASSPATH}" ${JAVA_OPTS} -Dneo4j.home="${NEO4J_HOME}" -Dfile.encoding=UTF-8 "${MAIN_CLASS}"
}

showinfo() {
  reportstatus

  exitonnojava
  buildclasspath

  echo "NEO4J_HOME:        ${NEO4J_HOME}"
  echo "JAVA_HOME:         ${JAVA_HOME}"
  echo "JAVA_OPTS:         ${JAVA_OPTS}"
  echo "CLASSPATH:         ${CLASSPATH}"
  printextrainfo
}

case "$1" in
  console)
    console
    ;;

  start)
    startit
    ;;

  stop)
    stopit
    ;;

  restart)
    stopit
    startit
    ;;

  status)
    reportstatus
    ;;

  info)
    showinfo
    ;;

  *)
    echo "Usage: ${SCRIPT} { console | start | stop | restart | status | info }"
    ;;
esac

exit $?
