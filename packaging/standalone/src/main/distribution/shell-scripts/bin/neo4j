#!/usr/bin/env bash
# Copyright (c) 2002-2015 "Neo Technology,"

# Network Engine for Objects in Lund AB [http://neotechnology.com]
#
# This file is part of Neo4j.
#
# Neo4j is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

FRIENDLY_NAME="Neo4j Server"

function findBaseDirAndCdThere {
# This seems to not be safe to run at any time. If that
# is the case, it should be fixed to be so, if possible.
  SCRIPT=$0

  cd "`dirname "$SCRIPT"`"
  SCRIPT=`basename "$SCRIPT"`

  while [ -L "$SCRIPT" ]
  do
    SCRIPT=$( readlink "$SCRIPT" )
    cd "$(dirname "$SCRIPT")"
    SCRIPT=`basename "$SCRIPT"`
  done
  NEO4J_HOME=`cd $( dirname "$SCRIPT" )/.. && dirs -l +0`
  NEO4J_INSTANCE=$NEO4J_HOME
  [ -n "$NEO4J_CONFIG" ] || NEO4J_CONFIG=$NEO4J_HOME/conf
  [ -n "$NEO4J_LOG" ] || NEO4J_LOG=$NEO4J_HOME/data/log
  [ -n "$NEO4J_PIDFILE" ] || NEO4J_PIDFILE=$NEO4J_HOME/data/neo4j-service.pid

  cd "$NEO4J_HOME"
}

function parseConfig {
  if [ ${BASH_VERSINFO[0]} -eq 3 ] ; then
    if [ ${BASH_VERSINFO[1]} -lt 2 ] ; then
      getconfigquoted "${NEO4J_CONFIG}/neo4j-wrapper.conf"
      getconfigquoted "${NEO4J_CONFIG}/neo4j-server.properties"
      return
    fi
  fi
  getconfig "${NEO4J_CONFIG}/neo4j-wrapper.conf"
  getconfig "${NEO4J_CONFIG}/neo4j-server.properties"
}

findBaseDirAndCdThere
source bin/utils
parseConfig

JAVA_OPTS="-server -XX:+DisableExplicitGC ${wrapper_java_additional}"
[ -z "${wrapper_java_initmemory}" ] || JAVA_OPTS="$JAVA_OPTS -Xms${wrapper_java_initmemory}m"
[ -z "${wrapper_java_maxmemory}" ] || JAVA_OPTS="$JAVA_OPTS -Xmx${wrapper_java_maxmemory}m"

NEO4J_SERVER_PORT=${org_neo4j_server_webserver_port:=7474}

TIMEOUT=120

PID_FILE=${NEO4J_PIDFILE}
buildclasspath() {
  LIBDIR="$NEO4J_HOME"/lib
  if [ ! -e "$LIBDIR" ] ; then
    echo "Error: missing Neo4j Library, expected at $LIBDIR"
    exit 1
  fi

  SYSLIBDIR="$NEO4J_HOME"/system/lib
  if [ ! -e "$SYSLIBDIR" ] ; then
    echo "Error: missing Neo4j System Library, expected at $SYSLIBDIR"
    exit 1
  fi

  ALL_JARS=""
  for jar in "$LIBDIR"/*.jar "$SYSLIBDIR"/*.jar ; do
    [ -z "$ALL_JARS" ] && ALL_JARS="$jar" || ALL_JARS="$ALL_JARS":"$jar"
  done

  for jar in "$NEO4J_HOME"/plugins/*.jar ; do
    if [ -e "$jar" ] ; then
      ALL_JARS="$ALL_JARS":"$jar"
    fi
  done

  for jar in "$NEO4J_HOME"/plugins/**/*.jar ; do
    if [ -e "$jar" ] ; then
      ALL_JARS="$ALL_JARS":"$jar"
    fi
  done

  CLASSPATH=${ALL_JARS}
}

detectrunning() {
  if [ $DIST_OS = "solaris" ] ; then
    ## SmartOS has a different lsof command line arguments
    newpid=$(lsof -o $NEO4J_SERVER_PORT | grep '::' | head -n1 | cut -d ' ' -f 1)
  else
    LSOFVER=$(lsof -v 2>&1 | grep revision | grep -v latest | cut -d: -f2 | tr -d ' ' | tr -d .)
    #Newer versions of lsof has the -sTCP:LISTEN flag, which is exactly what we need.
    #This flag does not exist before 4.78, therefore grepping for TST=LISTEN worked there.
    #Only in 4.89 did grepping begin to not work, as the output from lsof changed.
    if [ "$LSOFVER" -ge 478 ]; then
      newpid=$(lsof -i :"$NEO4J_SERVER_PORT" -sTCP:LISTEN -t)
    else
      newpid=$(lsof -i :"$NEO4J_SERVER_PORT" -F T -Ts | grep -i "TST=LISTEN" -B1 | head -n1)
      newpid=${newpid:1}
    fi
  fi
}

startit() {
  detectos
  exitonnojava
  checkstatus
  checklimits

  checkjvmcompatibility

  detectrunning
  if [ $newpid ] ; then
	     echo "Another server-process is running with [$newpid], cannot start a new one. Exiting."
	     exit 2;
  fi

  if [ -z $NEO4J_PID ] ; then
    printf "Starting $FRIENDLY_NAME..."

    buildclasspath
    checkclasspath
    checkandrepairenv

    CONSOLE_LOG="$NEO4J_LOG/console.log"

    "$JAVACMD" -cp "${CLASSPATH}" $JAVA_OPTS  \
      -Dneo4j.home="${NEO4J_HOME}" \
      -Dfile.encoding=UTF-8 \
      #{neo4j.mainClass} >> "${CONSOLE_LOG}" 2>&1 & echo $! > "${PID_FILE}"

    STARTED_PID=$( cat "$PID_FILE" )

    if [ "$org_neo4j_server_database_mode" = "HA" ] ; then
      if kill -0 $STARTED_PID 2>/dev/null ; then
        echo "HA instance started in process [$STARTED_PID]. Will be operational once connected to peers. See ${CONSOLE_LOG} for current status."
        exit 0
      else
        echo "HA instance was unable to start. See ${CONSOLE_LOG}."
        rm "$PID_FILE"
        exit 1
      fi
    fi

    echo -n "process [$STARTED_PID]"

	  if [ $WAIT = "true" ] ; then
	    echo -n "... waiting for server to be ready."
	    while kill -0 $STARTED_PID 2> /dev/null ; do
	      ## wait for start, pick up the server listening on the port
	      detectrunning
	      if [ $newpid ] ; then
	         break
	      fi

	      printf "."
	      sleep 1
	    done

	    if kill -0 $STARTED_PID 2>/dev/null ; then
	      if [ "$newpid" != "$STARTED_PID" ] ; then
		    rm "$PID_FILE"
	        kill -9 $STARTED_PID
	        echo " Failed to start within $TIMEOUT seconds."
	        echo "$FRIENDLY_NAME failed to start, please check the logs for details."
	        echo "If startup is blocked on a long recovery, use '$0 start-no-wait' to give the startup more time."
	        exit 2
	      fi

	      echo " OK."
        echo "http://localhost:$NEO4J_SERVER_PORT/ is ready."
	      exit 0
	    fi

	    echo " Failed to start within $TIMEOUT seconds."
	    echo "$FRIENDLY_NAME may have failed to start, please check the logs."
	    rm "$PID_FILE"
	    exit 1
    else
        echo "...Started the server in the background, returning..."
    fi
  else
    echo "$FRIENDLY_NAME already running with pid $NEO4J_PID"
    exit 0
  fi
}

console() {
  detectos
  checkstatus
  checklimits

  if [ -z $NEO4J_PID ] ; then
    echo "Starting $FRIENDLY_NAME console-mode..."

    exitonnojava
    buildclasspath
    checkandrepairenv

    exec "$JAVACMD" -cp "${CLASSPATH}" $JAVA_OPTS \
        -Dneo4j.home="${NEO4J_HOME}" \
        -Dfile.encoding=UTF-8 \
        #{neo4j.mainClass}

  else
    echo "$FRIENDLY_NAME already running with pid $NEO4J_PID"
    exit 1
  fi
}

showinfo() {
  reportstatus

  exitonnojava
  buildclasspath

  echo "NEO4J_HOME:        $NEO4J_HOME"
  echo "NEO4J_SERVER_PORT: $NEO4J_SERVER_PORT"
  echo "NEO4J_INSTANCE:    $NEO4J_INSTANCE"
  echo "JAVA_HOME:         $JAVA_HOME"
  echo "JAVA_OPTS:         $JAVA_OPTS"
  echo "CLASSPATH:         $CLASSPATH"
}

# END FUNCTIONS
# BEGIN MAIN

case "$1" in
  console)
    console
    exit 0
    ;;

  start)
    WAIT=true
    startit
    ;;

  start-no-wait)
    WAIT=false
    startit
    exit 0
    ;;

  stop)
    stopit
    exit 0
    ;;

  restart)
    WAIT=true
    stopit
    startit
    exit 0
    ;;

  status)
    reportstatus
    exit 0
    ;;

  info)
    showinfo
    exit 0
    ;;
  *)
    echo "Usage: neo4j { console | start | start-no-wait | stop | restart | status | info }"
    exit 0;;

esac

exit $?
