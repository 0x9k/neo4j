#!/bin/bash
# Copyright (c) 2002-2015 "Neo Technology,"
# Network Engine for Objects in Lund AB [http://neotechnology.com]
#
# This file is part of Neo4j.
#
# Neo4j is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

FRIENDLY_NAME="Neo4j Arbiter"

function findBaseDirAndCdThere {
  SCRIPT=$0

  cd "`dirname "$SCRIPT"`"
  SCRIPT=`basename "$SCRIPT"`

  while [ -L "$SCRIPT" ]
  do
    SCRIPT=$( readlink "$SCRIPT" )
    cd "$(dirname "$SCRIPT")"
    SCRIPT=`basename "$SCRIPT"`
  done
  NEO4J_HOME=`cd $( dirname "$SCRIPT" )/.. && dirs -l +0`
  NEO4J_INSTANCE=$NEO4J_HOME
  [ -n "$NEO4J_CONFIG" ] || NEO4J_CONFIG=$NEO4J_HOME/conf
  [ -n "$NEO4J_LOG" ] || NEO4J_LOG=$NEO4J_HOME/data/log
  [ -n "$NEO4J_PIDFILE" ] || NEO4J_PIDFILE=$NEO4J_HOME/data/neo4j-arbiter.pid

  cd "$NEO4J_HOME"
}

function parseConfig {
  if [ ${BASH_VERSINFO[0]} -eq 3 ] ; then
    if [ ${BASH_VERSINFO[1]} -lt 2 ] ; then
      getconfigquoted "${NEO4J_CONFIG}/arbiter-wrapper.conf"
      return
    fi
  fi
  getconfig "${NEO4J_CONFIG}/arbiter-wrapper.conf"
}

findBaseDirAndCdThere
source bin/utils
parseConfig

JAVA_OPTS="-server ${wrapper_java_additional}"

TIMEOUT=20

PID_FILE=${NEO4J_PIDFILE}

buildclasspath() {
  CLASSPATH="$NEO4J_HOME/lib/*:$NEO4J_HOME/system/lib/*"
}

startit() {
  exitonnojava
  checkstatus

  if [ -z $NEO4J_PID ] ; then
    printf "Starting $FRIENDLY_NAME..."

    buildclasspath
    checkandrepairenv

    $JAVACMD -cp ${CLASSPATH} $JAVA_OPTS \
      -DconfigFile=conf/arbiter-wrapper.conf \
      -Dorg.neo4j.server.properties="${NEO4J_CONFIG}/neo4j-server.properties" \
      -Dorg.neo4j.cluster.logdirectory="${NEO4J_LOG}" \
      -Dneo4j.home="${NEO4J_HOME}" \
      org.neo4j.server.enterprise.StandaloneClusterClient  >> "$NEO4J_LOG/arbiter-console.log" 2>&1 & echo $! > "${PID_FILE}"
    STARTED_PID=$( cat "$PID_FILE" )

    printf " process [$STARTED_PID]... waiting for arbiter to be ready."

    if kill -0 $STARTED_PID 2>/dev/null ; then
      echo " OK."
      exit 0
    fi

    echo " BAD."
    echo "$FRIENDLY_NAME may have failed to start, please check the logs."
    rm "$PID_FILE"
    exit 1
  else
    echo "$FRIENDLY_NAME already running with pid $NEO4J_PID"
    exit 0
  fi
}

console() {
  checkstatus

  if [ -z $NEO4J_PID ] ; then
    echo "Starting $FRIENDLY_NAME console-mode..."

    exitonnojava
    buildclasspath
    checkandrepairenv

    $JAVACMD -cp "${CLASSPATH}" $JAVA_OPTS -DconfigFile=conf/arbiter-wrapper.conf \
	    -DconfigFile=conf/arbiter-wrapper.conf \
      -Dorg.neo4j.server.properties="${NEO4J_CONFIG}/neo4j-server.properties" \
	    -Dorg.neo4j.cluster.logdirectory="${NEO4J_LOG}" \
      -Dneo4j.home=\"${NEO4J_HOME}\" \
      org.neo4j.server.enterprise.StandaloneClusterClient
  else
    echo "$FRIENDLY_NAME already running with pid $NEO4J_PID"
    exit 1
  fi
}

showinfo() {
  reportstatus

  exitonnojava
  buildclasspath

  echo "NEO4J_HOME:        $NEO4J_HOME"
  echo "NEO4J_INSTANCE:    $NEO4J_INSTANCE"
  echo "JAVA_HOME:         $JAVA_HOME"
  echo "JAVA_OPTS:         $JAVA_OPTS"
  echo "CLASSPATH:         $CLASSPATH"
}

# END FUNCTIONS
# BEGIN MAIN

case "${1}" in
  console)
    console
    exit 0
    ;;

  start)
    startit
    exit 0
    ;;

  stop)
    stopit
    exit 0
    ;;

  restart)
    stopit
    startit
    exit 0
    ;;

  status)
    reportstatus
    exit 0
    ;;

  info)
    showinfo
    exit 0
    ;;

  *)
    echo "Usage: neo4j { start | stop | restart | status | info }"
    exit 1;;
esac

exit $?
